// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: dataUpdate.proto

package rpcv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataUpdaterClient is the client API for DataUpdater service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataUpdaterClient interface {
	FetchOfficialDishes(ctx context.Context, in *FetchOfficialDishesRequest, opts ...grpc.CallOption) (*FetchOfficialDishesResponse, error)
	FetchIngredients(ctx context.Context, in *FetchIngredientsRequest, opts ...grpc.CallOption) (*FetchIngredientsResponse, error)
	SynchronizePersonalDishes(ctx context.Context, in *SynchronizePersonalDishesRequest, opts ...grpc.CallOption) (*SynchronizePersonalDishesResponse, error)
	UploadPersonalDishes(ctx context.Context, in *UploadPersonalDishesRequest, opts ...grpc.CallOption) (*UploadPersonalDishesResponse, error)
}

type dataUpdaterClient struct {
	cc grpc.ClientConnInterface
}

func NewDataUpdaterClient(cc grpc.ClientConnInterface) DataUpdaterClient {
	return &dataUpdaterClient{cc}
}

func (c *dataUpdaterClient) FetchOfficialDishes(ctx context.Context, in *FetchOfficialDishesRequest, opts ...grpc.CallOption) (*FetchOfficialDishesResponse, error) {
	out := new(FetchOfficialDishesResponse)
	err := c.cc.Invoke(ctx, "/rpcv1.DataUpdater/FetchOfficialDishes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataUpdaterClient) FetchIngredients(ctx context.Context, in *FetchIngredientsRequest, opts ...grpc.CallOption) (*FetchIngredientsResponse, error) {
	out := new(FetchIngredientsResponse)
	err := c.cc.Invoke(ctx, "/rpcv1.DataUpdater/FetchIngredients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataUpdaterClient) SynchronizePersonalDishes(ctx context.Context, in *SynchronizePersonalDishesRequest, opts ...grpc.CallOption) (*SynchronizePersonalDishesResponse, error) {
	out := new(SynchronizePersonalDishesResponse)
	err := c.cc.Invoke(ctx, "/rpcv1.DataUpdater/SynchronizePersonalDishes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataUpdaterClient) UploadPersonalDishes(ctx context.Context, in *UploadPersonalDishesRequest, opts ...grpc.CallOption) (*UploadPersonalDishesResponse, error) {
	out := new(UploadPersonalDishesResponse)
	err := c.cc.Invoke(ctx, "/rpcv1.DataUpdater/UploadPersonalDishes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataUpdaterServer is the server API for DataUpdater service.
// All implementations must embed UnimplementedDataUpdaterServer
// for forward compatibility
type DataUpdaterServer interface {
	FetchOfficialDishes(context.Context, *FetchOfficialDishesRequest) (*FetchOfficialDishesResponse, error)
	FetchIngredients(context.Context, *FetchIngredientsRequest) (*FetchIngredientsResponse, error)
	SynchronizePersonalDishes(context.Context, *SynchronizePersonalDishesRequest) (*SynchronizePersonalDishesResponse, error)
	UploadPersonalDishes(context.Context, *UploadPersonalDishesRequest) (*UploadPersonalDishesResponse, error)
	mustEmbedUnimplementedDataUpdaterServer()
}

// UnimplementedDataUpdaterServer must be embedded to have forward compatible implementations.
type UnimplementedDataUpdaterServer struct {
}

func (UnimplementedDataUpdaterServer) FetchOfficialDishes(context.Context, *FetchOfficialDishesRequest) (*FetchOfficialDishesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOfficialDishes not implemented")
}
func (UnimplementedDataUpdaterServer) FetchIngredients(context.Context, *FetchIngredientsRequest) (*FetchIngredientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchIngredients not implemented")
}
func (UnimplementedDataUpdaterServer) SynchronizePersonalDishes(context.Context, *SynchronizePersonalDishesRequest) (*SynchronizePersonalDishesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SynchronizePersonalDishes not implemented")
}
func (UnimplementedDataUpdaterServer) UploadPersonalDishes(context.Context, *UploadPersonalDishesRequest) (*UploadPersonalDishesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPersonalDishes not implemented")
}
func (UnimplementedDataUpdaterServer) mustEmbedUnimplementedDataUpdaterServer() {}

// UnsafeDataUpdaterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataUpdaterServer will
// result in compilation errors.
type UnsafeDataUpdaterServer interface {
	mustEmbedUnimplementedDataUpdaterServer()
}

func RegisterDataUpdaterServer(s grpc.ServiceRegistrar, srv DataUpdaterServer) {
	s.RegisterService(&DataUpdater_ServiceDesc, srv)
}

func _DataUpdater_FetchOfficialDishes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOfficialDishesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataUpdaterServer).FetchOfficialDishes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcv1.DataUpdater/FetchOfficialDishes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataUpdaterServer).FetchOfficialDishes(ctx, req.(*FetchOfficialDishesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataUpdater_FetchIngredients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchIngredientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataUpdaterServer).FetchIngredients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcv1.DataUpdater/FetchIngredients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataUpdaterServer).FetchIngredients(ctx, req.(*FetchIngredientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataUpdater_SynchronizePersonalDishes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SynchronizePersonalDishesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataUpdaterServer).SynchronizePersonalDishes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcv1.DataUpdater/SynchronizePersonalDishes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataUpdaterServer).SynchronizePersonalDishes(ctx, req.(*SynchronizePersonalDishesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataUpdater_UploadPersonalDishes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPersonalDishesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataUpdaterServer).UploadPersonalDishes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcv1.DataUpdater/UploadPersonalDishes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataUpdaterServer).UploadPersonalDishes(ctx, req.(*UploadPersonalDishesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataUpdater_ServiceDesc is the grpc.ServiceDesc for DataUpdater service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataUpdater_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcv1.DataUpdater",
	HandlerType: (*DataUpdaterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchOfficialDishes",
			Handler:    _DataUpdater_FetchOfficialDishes_Handler,
		},
		{
			MethodName: "FetchIngredients",
			Handler:    _DataUpdater_FetchIngredients_Handler,
		},
		{
			MethodName: "SynchronizePersonalDishes",
			Handler:    _DataUpdater_SynchronizePersonalDishes_Handler,
		},
		{
			MethodName: "UploadPersonalDishes",
			Handler:    _DataUpdater_UploadPersonalDishes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataUpdate.proto",
}
